{"version":3,"sources":["app/sorting-algorithms/mergeSort.js","app/helper-functions/swap.js","app/sorting-algorithms/quickSort.js","app/sorting-algorithms/heapSort.js","app/components/sliderBar.js","app/components/newArrayButton.js","app/main.js","app/sorting-algorithms/bubbleSort.js","app/sorting-algorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["MergeSortAnimations","values","animations","array","auxiliaryArray","length","mergeSortHelper","originalArray","start","end","middle","Math","floor","k","i","j","push","merge","swap","temp","QuickSortAnimations","quickSort","low","high","pivot_pos","pivot","partition","heapify","n","largest","l","r","heapifyWithAnimation","SliderBar","withStyles","root","color","height","width","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","valueLabel","left","track","borderRadius","rail","Slider","marks","value","label","NewArrayButton","props","state","open","maxWidth","this","setState","setArraySize","resetArray","Button","variant","onClick","handleClickOpen","Dialog","fullWidth","onClose","handleClose","DialogTitle","DialogContent","className","aria-labelledby","valueLabelDisplay","onChange","min","max","DialogActions","Component","randomIntGenerator","random","SortingVisualizer","changeArraySize","event","arraySize","handleSliderChange","animationSpeed","timerIds","disableButtons","bind","setArrayWhenFirstLoad","forEach","id","clearTimeout","clearAllTimeouts","arrayBars","document","getElementsByClassName","barOneInx","barTwoInx","barOneStyle","style","barTwoStyle","t","setTimeout","MAX_ANIMATION_MS","barInx","barHeight","sortAlgo","disableAllButtons","N","HeapSortAnimations","BubbleSortAnimations","mind_inx","InsertionSortAnimations","playAnimations","disabled","doSort","map","index","key","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAEaA,EAAsB,SAACC,GAChC,IAAMC,EAAa,GACbC,EAAK,YAAOF,GACZG,EAAc,YAAOH,GAE3B,OAAIA,EAAOI,QAAU,GAMzB,SAASC,EAAgBC,EAAeC,EAAOC,EAAKL,EAAgBF,GAEhE,GAAGM,IAAUC,EAAK,OAClB,IAAMC,EAASC,KAAKC,OAAOJ,EAAQC,GAAO,GAG1CH,EAAgBF,EAAgBI,EAAOE,EAAQH,EAAeL,GAC9DI,EAAgBF,EAAgBM,EAAO,EAAGD,EAAKF,EAAeL,GAMlE,SAAeK,EAAeC,EAAOE,EAAQD,EAAKL,EAAgBF,GAC9D,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAS,EAEjB,KAAMI,GAAKJ,GAAUK,GAAKN,GAEtBP,EAAWc,KAAK,CAAC,WAAYF,EAAGC,IAEhCb,EAAWc,KAAK,CAAC,WAAYF,EAAGC,IAE7BX,EAAeU,IAAMV,EAAeW,IACnCb,EAAWc,KAAK,CAAC,OAAQH,EAAGT,EAAeU,KAC3CP,EAAcM,KAAOT,EAAeU,OAEpCZ,EAAWc,KAAK,CAAC,OAAQH,EAAGT,EAAeW,KAC3CR,EAAcM,KAAOT,EAAeW,MAK5C,KAAOD,GAAKJ,GACRR,EAAWc,KAAK,CAAC,WAAYF,EAAGA,IAChCZ,EAAWc,KAAK,CAAC,WAAYF,EAAGA,IAChCZ,EAAWc,KAAK,CAAC,OAAQH,EAAGT,EAAeU,KAG3CP,EAAcM,KAAOT,EAAeU,KAIxC,KAAOC,GAAKN,GACRP,EAAWc,KAAK,CAAC,WAAYD,EAAGA,IAChCb,EAAWc,KAAK,CAAC,WAAYD,EAAGA,IAEhCb,EAAWc,KAAK,CAAC,OAAQH,EAAGT,EAAeW,KAE3CR,EAAcM,KAAOT,EAAeW,KAxCxCE,CAAMV,EAAeC,EAAOE,EAAQD,EAAKL,EAAgBF,GAdzDI,CAAgBH,EAAO,EAAGA,EAAME,OAAS,EAAGD,EAAgBF,GAF7BA,GCN5B,IAAMgB,EAAO,SAACf,EAAOW,EAAGC,GAC3B,IAAII,EAAOhB,EAAMW,GACjBX,EAAMW,GAAKX,EAAMY,GACjBZ,EAAMY,GAAKI,GCCFC,EAAsB,SAACnB,GAChC,IAAMC,EAAa,GACbC,EAAK,YAAOF,GAElB,OAAIE,EAAME,QAAU,GAQxB,SAASgB,EAAUlB,EAAOD,EAAYoB,EAAKC,GACvC,GAAID,EAAMC,EAAM,CAGZ,IAAIC,EAUZ,SAAmBrB,EAAOD,EAAYoB,EAAKC,GAKvC,IAHA,IAAIE,EAAQtB,EAAMoB,GACdT,EAAIQ,EAAM,EAENP,EAAIO,EAAKP,EAAIQ,EAAMR,IAEvBb,EAAWc,KAAK,CAAC,WAAYD,EAAGQ,IAChCrB,EAAWc,KAAK,CAAC,WAAYD,EAAGQ,IAE7BpB,EAAMY,GAAKU,IACVX,IACAZ,EAAWc,KAAK,CAAC,OAAQD,EAAGZ,EAAMW,KAClCZ,EAAWc,KAAK,CAAC,OAAQF,EAAGX,EAAMY,KAGlCG,EAAKf,EAAOW,EAAGC,IAWvB,OAPAb,EAAWc,KAAK,CAAC,OAAQF,EAAE,EAAGX,EAAMoB,KACpCrB,EAAWc,KAAK,CAAC,OAAQO,EAAMpB,EAAMW,EAAI,KAGzCI,EAAKf,EAAOW,EAAI,EAAGS,GAGZT,EAAI,EArCSY,CAAUvB,EAAOD,EAAYoB,EAAKC,GAGlDF,EAAUlB,EAAOD,EAAYoB,EAAKE,EAAY,GAG9CH,EAAUlB,EAAOD,EAAYsB,EAAY,EAAGD,IAhBhDF,CAAUlB,EAAOD,EAAY,EAAGC,EAAME,OAAS,GAFjBH,GCuBlC,SAASyB,EAAQxB,EAAOyB,EAAGd,GAEvB,IAAIe,EAAUf,EACVgB,EAAI,EAAIhB,EAAI,EACZiB,EAAI,EAAGjB,EAAI,EAGXgB,EAAIF,GAAKzB,EAAM2B,GAAK3B,EAAM0B,KAE1BA,EAAUC,GAIXC,EAAIH,GAAKzB,EAAM4B,GAAK5B,EAAM0B,KACzBA,EAAUE,GAGVF,IAAYf,IAEZI,EAAKf,EAAOW,EAAGe,GAGfF,EAAQxB,EAAOyB,EAAGC,IAO1B,SAASG,EAAqB7B,EAAOyB,EAAGd,EAAGZ,GAEvC,IAAI2B,EAAUf,EACVgB,EAAI,EAAIhB,EAAI,EACZiB,EAAI,EAAGjB,EAAI,EAGXgB,EAAIF,GAAKzB,EAAM2B,GAAK3B,EAAM0B,KAC1B3B,EAAWc,KAAK,CAAC,WAAYc,EAAGD,IAChC3B,EAAWc,KAAK,CAAC,WAAYc,EAAGD,IAEhCA,EAAUC,GAIXC,EAAIH,GAAKzB,EAAM4B,GAAK5B,EAAM0B,KACzB3B,EAAWc,KAAK,CAAC,WAAYe,EAAGF,IAChC3B,EAAWc,KAAK,CAAC,WAAYe,EAAGF,IAChCA,EAAUE,GAIVF,IAAYf,IACZZ,EAAWc,KAAK,CAAC,OAAQF,EAAGX,EAAM0B,KAClC3B,EAAWc,KAAK,CAAC,OAAQa,EAAS1B,EAAMW,KAExCI,EAAKf,EAAOW,EAAGe,GAGfF,EAAQxB,EAAOyB,EAAGC,I,mBCvFbI,EAAYC,YAAW,CAChCC,KAAM,CACJC,MAAO,UACPC,OAAQ,EACRC,MAAO,OAETC,MAAO,CACLF,OAAQ,GACRC,MAAO,GACPE,gBAAiB,OACjBC,OAAQ,yBACRC,WAAY,EACZC,YAAa,GACb,6BAA8B,CAC5BC,UAAW,YAGfC,WAAY,CACVC,KAAM,oBAERC,MAAO,CACLV,OAAQ,EACRW,aAAc,GAEhBC,KAAM,CACJZ,OAAQ,EACRW,aAAc,IA1BKd,CA4BtBgB,K,gCCrBGC,EAAQ,CACV,CACIC,MAAO,GACPC,MAAO,IAEX,CACID,MAAO,IACPC,MAAO,QAIMC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAM,EACNC,SAAU,MALC,E,8DAUfC,KAAKC,SAAS,CACVH,MAAM,M,oCAKVE,KAAKC,SAAS,CACVH,MAAM,M,+BAIJ,IAAD,SACoBE,KAAKH,MAAvBC,EADF,EACEA,KAAMC,EADR,EACQA,SADR,EAEqCC,KAAKJ,MAAxCH,EAFF,EAEEA,MAAOS,EAFT,EAESA,aAAcC,EAFvB,EAEuBA,WAE5B,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAY5B,MAAM,YAAY6B,QAAS,kBAAI,EAAKC,oBAAhE,eAEA,kBAACC,EAAA,EAAD,CAAQC,WAAW,EAAMV,SAAUA,EAAUD,KAAMA,EAAMY,QAAS,kBAAI,EAAKC,gBACvE,kBAACC,EAAA,EAAD,KAAc,kBAEd,kBAACC,EAAA,EAAD,CAAeC,UAAU,oBACrB,kBAACvB,EAAA,EAAD,CAAQC,MAAOA,EAAOuB,kBAAgB,oBAAoBC,kBAAkB,OAAOvB,MAAOA,EAAOwB,SAAUf,EAAcgB,IAAK,GAAIC,IAAK,OAG3I,kBAACC,EAAA,EAAD,KACI,kBAAChB,EAAA,EAAD,CAAQE,QAAS,WAAM,EAAKK,cAAeR,MAA3C,mB,GAtCoBkB,aCHtC7B,G,MAAQ,CACV,CACIC,MAAO,EACPC,MAAO,MAEX,CACID,MAAO,IACPC,MAAO,UAKf,SAAS4B,EAAmBJ,EAAKC,GAC7B,OAAOnE,KAAKC,MAAMD,KAAKuE,UAAYJ,EAAMD,EAAM,GAAKA,G,IAGnCM,E,kDACjB,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IAkDV6B,gBAAkB,SAACC,EAAOjC,GACtB,EAAKQ,SAAS,CACV0B,UAAWlC,KArDA,EAuIpBmC,mBAAqB,SAACF,EAAOjC,GACxB,EAAKQ,SAAS,CAAC4B,eAAgBpC,KArI/B,EAAKqC,SAAW,GAEhB,EAAKjC,MAAQ,CACTrD,MAAO,GACPmF,UAAW,IACXE,eAAgB,GAChBE,gBAAgB,GAGpB,EAAKN,gBAAkB,EAAKA,gBAAgBO,KAArB,gBACvB,EAAK7B,WAAa,EAAKA,WAAW6B,KAAhB,gBAbH,E,gEAqBfhC,KAAKiC,0B,8CAML,IAFA,IAAMzF,EAAQ,GAENW,EAAI,EAAGA,EAAI6C,KAAKH,MAAM8B,UAAWxE,IACrCX,EAAMa,KAAKiE,EAAmB,GAAI,MAEtCtB,KAAKC,SAAS,CAACzD,MAAOA,M,yCAItBwD,KAAK8B,SAASI,SAAQ,SAASC,GAC3BC,aAAaD,Q,mCAOjB,IAFA,IAAM3F,EAAQ,GAENW,EAAI,EAAGA,EAAI6C,KAAKH,MAAM8B,UAAWxE,IACrCX,EAAMa,KAAKiE,EAAmB,GAAI,MAEtCtB,KAAKC,SAAS,CAACzD,MAAOA,IAGtBwD,KAAKqC,qB,qCAkBM9F,GACX,IADwB,IAAD,kBACfY,GACJ,IAAMmF,EAAYC,SAASC,uBAAuB,aAGlD,GAF0C,aAArBjG,EAAWY,GAAG,IAA0C,aAArBZ,EAAWY,GAAG,GAEtD,CACZ,IAAMsB,EAA8B,aAArBlC,EAAWY,GAAG,GA7FrB,MADD,UA6FK,cAGqBZ,EAAWY,GAHhC,GAGHsF,EAHG,KAGQC,EAHR,KAKNC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MAErCE,EAAIC,YAAW,WACfJ,EAAY9D,gBAAkBJ,EAC9BoE,EAAYhE,gBAAkBJ,IAC/BtB,GAAK6F,IAAuB,EAAKnD,MAAMgC,iBAE1C,EAAKC,SAASzE,KAAKyF,OAChB,CACH,IAAIA,EAAIC,YAAW,WAAO,IAAD,cACSxG,EAAWY,GADpB,GACZ8F,EADY,KACJC,EADI,KAGJZ,EAAUW,GAAQL,MAC1BlE,OAAT,UAAgC,GAAXwE,EAArB,QAED/F,GAAK6F,IAAuB,EAAKnD,MAAMgC,iBAE1C,EAAKC,SAASzE,KAAKyF,KA3BnB3F,EAAI,EAAGA,EAAIZ,EAAWG,OAAQS,IAAM,EAApCA,K,0CAiCR6C,KAAKC,SAAS,CAAC8B,gBAAgB,M,6BAG5BoB,GAAW,IAAD,OACbnD,KAAKoD,oBAEL,IAAI7G,EAAa,GAEjB,OAAO4G,GACH,IAAK,YACD5G,EAAaF,EAAoB2D,KAAKH,MAAMrD,OAC5C,MACJ,IAAK,YACDD,EAAakB,EAAoBuC,KAAKH,MAAMrD,OAC5C,MACJ,IAAK,WACDD,EHnJkB,SAACD,GAO/B,IANA,IAAMC,EAAa,GACbC,EAAK,YAAOF,GAEd+G,EAAI7G,EAAME,OAGNS,EAAIkG,EAAI,EAAI,EAAGlG,GAAK,EAAGA,IAC3Ba,EAAQxB,EAAO6G,EAAGlG,GAGtB,IAAI,IAAIA,EAAIkG,EAAI,EAAGlG,EAAI,EAAGA,IACtBZ,EAAWc,KAAK,CAAC,OAAQF,EAAGX,EAAM,KAClCD,EAAWc,KAAK,CAAC,OAAQ,EAAGb,EAAMW,KAGlCI,EAAKf,EAAO,EAAGW,GAGfkB,EAAqB7B,EAAOW,EAAG,EAAGZ,GAGtC,OAAOA,EG6HkB+G,CAAmBtD,KAAKH,MAAMrD,OAC3C,MACJ,IAAK,aACDD,ECtJoB,SAACD,GAIjC,IAHA,IAAMC,EAAa,GACbC,EAAK,YAAOF,GAETa,EAAI,EAAGA,EAAIX,EAAME,OAAS,EAAGS,IAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAAME,OAASS,EAAI,EAAGC,IAEtCb,EAAWc,KAAK,CAAC,WAAYD,EAAGA,EAAE,IAClCb,EAAWc,KAAK,CAAC,WAAYD,EAAGA,EAAE,IAE/BZ,EAAMY,GAAKZ,EAAMY,EAAE,KAClBb,EAAWc,KAAK,CAAC,OAAQD,EAAGZ,EAAMY,EAAE,KACpCb,EAAWc,KAAK,CAAC,OAAQD,EAAI,EAAGZ,EAAMY,KAEtCG,EAAKf,EAAOY,EAAGA,EAAE,IAI7B,OAAOb,EDoIkBgH,CAAqBvD,KAAKH,MAAMrD,OAC7C,MACJ,IAAK,gBACDD,EEzJuB,SAACD,GAIpC,IAHA,IAAMC,EAAa,GACbC,EAAK,YAAOF,GAEVa,EAAI,EAAGA,EAAIX,EAAME,OAAS,EAAGS,IAAK,CAGtC,IADA,IAAIqG,EAAWrG,EACPC,EAAID,EAAI,EAAGC,EAAIZ,EAAME,OAAQU,IACjCb,EAAWc,KAAK,CAAC,WAAYF,EAAGC,IAChCb,EAAWc,KAAK,CAAC,WAAYF,EAAGC,IAE7BZ,EAAMY,GAAKZ,EAAMgH,KAChBA,EAAWpG,GAKnBb,EAAWc,KAAK,CAAC,OAAQF,EAAGX,EAAMgH,KAClCjH,EAAWc,KAAK,CAAC,OAAQmG,EAAUhH,EAAMW,KAEzCI,EAAKf,EAAOgH,EAAUrG,GAG1B,OAAOZ,EFkIkBkH,CAAwBzD,KAAKH,MAAMrD,OAChD,MACJ,QACID,EAAa,GAKrBwG,YAAW,WACP,EAAKW,eAAenH,KACrB,M,+BAOG,IAAD,SACoCyD,KAAKH,MAAvCgC,EADF,EACEA,eAAgBE,EADlB,EACkBA,eAEvB,OACI,yBAAKjB,UAAU,mBAEX,yBAAKA,UAAU,iBACX,iEAEA,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAgBrB,MAASO,KAAKH,MAAM8B,UAAWb,UAAU,iBAAiBZ,aAAcF,KAAKyB,gBAAiBtB,WAAYH,KAAKG,aAE/H,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAY5B,MAAM,UAAUkF,SAAU5B,EAAgBzB,QAAS,kBAAI,EAAKsD,OAAO,eAA/F,cAHJ,IAGsI,IAClI,kBAACxD,EAAA,EAAD,CAAQC,QAAQ,YAAY5B,MAAM,UAAUkF,SAAU5B,EAAgBzB,QAAS,kBAAI,EAAKsD,OAAO,eAA/F,cAJJ,IAIsI,IAClI,kBAACxD,EAAA,EAAD,CAAQC,QAAQ,YAAY5B,MAAM,UAAUkF,SAAU5B,EAAgBzB,QAAS,kBAAI,EAAKsD,OAAO,cAA/F,aALJ,IAKoI,IAChI,kBAACxD,EAAA,EAAD,CAAQC,QAAQ,YAAY5B,MAAM,UAAUkF,SAAU5B,EAAgBzB,QAAS,kBAAI,EAAKsD,OAAO,gBAA/F,eANJ,IAMwI,IACpI,kBAACxD,EAAA,EAAD,CAAQC,QAAQ,YAAY5B,MAAM,UAAUkF,SAAU5B,EAAgBzB,QAAS,kBAAI,EAAKsD,OAAO,mBAA/F,kBAPJ,IAO8I,KAG9I,yBAAK9C,UAAU,UACX,gDACA,kBAACxC,EAAD,CAAWkB,MAAOA,EAAOwB,kBAAkB,OAAOvB,MAAOoC,EAAgBZ,SAAUjB,KAAK4B,mBAAoBT,IApL3G,IAoLoIJ,kBAAgB,wBAI7J,yBAAKD,UAAU,uBACVd,KAAKH,MAAMrD,MAAMqH,KAAI,SAACpE,EAAOqE,GAAR,OAClB,yBAAKhD,UAAU,YACXiD,IAAK/G,KAAKuE,SACVqB,MAAO,CAAClE,OAAO,GAAD,OAAU,GAANe,EAAJ,MAAmBZ,gBA9LtC,sB,GAqBwBmF,IAAM3C,WGtBtC4C,MARf,WACI,OACA,yBAAKnD,UAAU,OACX,kBAAC,EAAD,QCKYoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac28abf6.chunk.js","sourcesContent":["// Runtime: O（NlogN)\r\n\r\nexport const MergeSortAnimations = (values) => {\r\n    const animations = [];\r\n    const array = [...values];\r\n    const auxiliaryArray = [...values]; // shallow copy of original arra\r\n\r\n    if (values.length <= 1) return animations;\r\n    \r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(originalArray, start, end, auxiliaryArray, animations) {\r\n\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end) / 2);\r\n\r\n    // sort first and second halves\r\n    mergeSortHelper(auxiliaryArray, start, middle, originalArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middle+1, end, originalArray, animations);\r\n    \r\n    // merge the sorted halves\r\n    merge(originalArray, start, middle, end, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(originalArray, start, middle, end, auxiliaryArray, animations) {\r\n    let k = start;\r\n    let i = start;\r\n    let j = middle + 1;\r\n\r\n    while(i <= middle && j <= end) {\r\n        // these are the values that are being compared, push them once to change their color\r\n        animations.push(['compare1', i, j]);\r\n        // push them second time to revert their color\r\n        animations.push(['compare2', i, j]);\r\n\r\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push(['swap', k, auxiliaryArray[i]]);\r\n            originalArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push(['swap', k, auxiliaryArray[j]]);\r\n            originalArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n\r\n    // add the remaining elements in the first interval\r\n    while (i <= middle) {\r\n        animations.push(['compare1', i, i]);\r\n        animations.push(['compare2', i, i]);\r\n        animations.push(['swap', k, auxiliaryArray[i]]);\r\n\r\n        // overwrite the value at index k with value at index i\r\n        originalArray[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    // add the remaining elements in the second interval\r\n    while (j <= end) {\r\n        animations.push(['compare1', j, j]);\r\n        animations.push(['compare2', j, j]);\r\n\r\n        animations.push(['swap', k, auxiliaryArray[j]]);\r\n\r\n        originalArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\n","// a helper function to swap array[i] and array[j]\r\nexport const swap = (array, i, j) => {\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}","// Runtime: O(NlogN)\r\n\r\nimport {swap} from '../helper-functions/swap';\r\n\r\n// Driver code\r\nexport const QuickSortAnimations = (values) => {\r\n    const animations = [];\r\n    const array = [...values]\r\n\r\n    if (array.length <= 1) return animations;\r\n\r\n    quickSort(array, animations, 0, array.length - 1);\r\n\r\n    return animations;\r\n}\r\n\r\n\r\nfunction quickSort(array, animations, low, high) {\r\n    if (low < high) {\r\n        // select pivot position and pull all elements < pivot on left and > pivot on right\r\n\r\n        let pivot_pos = partition(array, animations, low, high);\r\n\r\n        // sort elemest on the left of pivot\r\n        quickSort(array, animations, low, pivot_pos - 1);\r\n\r\n        // sort elements on the right of pivot\r\n        quickSort(array, animations, pivot_pos + 1, high);\r\n    }\r\n}\r\n\r\nfunction partition(array, animations, low, high) {\r\n    // always pick the last element as the pivot\r\n    let pivot = array[high];\r\n    let i = low - 1;\r\n\r\n    for(let j = low; j < high; j++) {\r\n        // we are comparing index j with pivot\r\n        animations.push(['compare1', j, high]);\r\n        animations.push(['compare2', j, high]);\r\n\r\n        if(array[j] < pivot) {\r\n            i++;\r\n            animations.push(['swap', j, array[i]]);\r\n            animations.push(['swap', i, array[j]]);\r\n\r\n            // swap arr[i] and arr[j]\r\n            swap(array, i, j);\r\n        }\r\n    }\r\n\r\n    animations.push(['swap', i+1, array[high]]);\r\n    animations.push(['swap', high, array[i + 1]]);\r\n\r\n    // swap arr[i+1] and pivot so that pivot is placed in the currect position\r\n    swap(array, i + 1, high)\r\n    \r\n    //return pivot's position\r\n    return i + 1;\r\n}\r\n","//Runtime: O(Nlog(N))\r\n\r\nimport {swap} from '../helper-functions/swap';\r\n\r\nexport const HeapSortAnimations = (values) => {\r\n    const animations = [];\r\n    const array = [...values];\r\n    \r\n    let N = array.length;\r\n\r\n    // build max heap\r\n    for(let i = N / 2 - 1; i >= 0; i--)\r\n        heapify(array, N, i);\r\n    \r\n    // one by one extract an element from heap\r\n    for(let i = N - 1; i > 0; i--){\r\n        animations.push(['swap', i, array[0]]);\r\n        animations.push(['swap', 0, array[i]]);\r\n\r\n        // swap current root to the end\r\n        swap(array, 0, i);\r\n\r\n        // Heapify the reduced heap\r\n        heapifyWithAnimation(array, i, 0, animations);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\n\r\n// to heapify a subtree rooted with node i which is an index in array[]\r\n// n is size of the heap\r\nfunction heapify(array, n, i) {\r\n    // Find largest among root, left child and right child\r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2* i + 2;\r\n\r\n    // if left child > root\r\n    if( l < n && array[l] > array[largest]) {\r\n\r\n        largest = l;\r\n    }\r\n    \r\n    // if left child > largest so far\r\n    if(r < n && array[r] > array[largest])\r\n        largest = r;\r\n    \r\n    // if the largest is not root\r\n    if (largest !== i) {\r\n\r\n        swap(array, i, largest);\r\n\r\n        // recursively heapify the subtree\r\n        heapify(array, n, largest);\r\n    }\r\n\r\n}\r\n\r\n// to heapify a subtree rooted with node i which is an index in array[]\r\n// n is size of the heap\r\nfunction heapifyWithAnimation(array, n, i, animations) {\r\n    // Find largest among root, left child and right child\r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2* i + 2;\r\n\r\n    // if left child > root\r\n    if( l < n && array[l] > array[largest]) {\r\n        animations.push(['compare1', l, largest]);\r\n        animations.push(['compare2', l, largest]);\r\n\r\n        largest = l;\r\n    }\r\n    \r\n    // if left child > largest so far\r\n    if(r < n && array[r] > array[largest]) {\r\n        animations.push(['compare1', r, largest]);\r\n        animations.push(['compare2', r, largest]);\r\n        largest = r;\r\n    }\r\n\r\n    // if the largest is not root\r\n    if (largest !== i) {\r\n        animations.push(['swap', i, array[largest]]);\r\n        animations.push(['swap', largest, array[i]]);\r\n\r\n        swap(array, i, largest);\r\n\r\n        // recursively heapify the subtree\r\n        heapify(array, n, largest);\r\n    }\r\n\r\n}","import { withStyles } from '@material-ui/core/styles';\r\nimport { Slider } from '@material-ui/core';\r\n\r\nexport const SliderBar = withStyles({\r\n    root: {\r\n      color: '#b30086',\r\n      height: 5,\r\n      width: '40%',\r\n    },\r\n    thumb: {\r\n      height: 15,\r\n      width: 15,\r\n      backgroundColor: '#fff',\r\n      border: '2px solid currentColor',\r\n      marginTop: -4,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n      height: 5,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 5,\r\n      borderRadius: 4,\r\n    },\r\n})(Slider);\r\n","import React from 'react'\r\nimport { Component } from \"react\";\r\nimport {Button} from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\nconst marks = [\r\n    {\r\n        value: 10,\r\n        label: 10,\r\n    },\r\n    {\r\n        value: 200,\r\n        label: '200',\r\n    },\r\n]\r\n\r\nexport default class NewArrayButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n            maxWidth: 'sm',\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({\r\n            open: true, \r\n        });\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({\r\n            open: false, \r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {open, maxWidth} = this.state;\r\n        const {value, setArraySize, resetArray} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.handleClickOpen()}> New Array </Button>\r\n\r\n                <Dialog fullWidth={true} maxWidth={maxWidth} open={open} onClose={()=>this.handleClose()}>\r\n                    <DialogTitle>{\"New Array Size\"}</DialogTitle>\r\n                    \r\n                    <DialogContent className=\"slider-container\">\r\n                        <Slider marks={marks} aria-labelledby=\"continuous-slider\" valueLabelDisplay=\"auto\" value={value} onChange={setArraySize} min={10} max={200}></Slider>\r\n                    </DialogContent>\r\n\r\n                    <DialogActions>\r\n                        <Button onClick={()=> {this.handleClose(); resetArray()}}>\r\n                            Generate\r\n                        </Button>\r\n                    </DialogActions>\r\n                \r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport {MergeSortAnimations} from './sorting-algorithms/mergeSort';\r\nimport {BubbleSortAnimations} from './sorting-algorithms/bubbleSort';\r\nimport {QuickSortAnimations } from './sorting-algorithms/quickSort';\r\nimport {InsertionSortAnimations} from './sorting-algorithms/insertionSort';\r\nimport {HeapSortAnimations} from './sorting-algorithms/heapSort';\r\nimport {SliderBar} from './components/sliderBar';\r\nimport NewArrayButton from './components/newArrayButton';\r\nimport './css/SortingVisualizer.css';\r\n\r\n\r\n// Some params\r\nconst ORIGINAL_COLOR = '#00bcd4';\r\nconst COMPARING_COLOR = 'red';\r\nconst MAX_ANIMATION_MS = 100;\r\n\r\n// Parameter used for the slider\r\nconst marks = [\r\n    {\r\n        value: 0,\r\n        label: '0%',\r\n    },\r\n    {\r\n        value: 100,\r\n        label: '100%',\r\n    },\r\n]\r\n\r\n\r\nfunction randomIntGenerator(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.timerIds = [];\r\n\r\n        this.state = {\r\n            array: [],\r\n            arraySize: 100,\r\n            animationSpeed: 50,\r\n            disableButtons: false,\r\n        };\r\n\r\n        this.changeArraySize = this.changeArraySize.bind(this);\r\n        this.resetArray = this.resetArray.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        /*\r\n            The componentDidMount() method runs \r\n            after the component output has been rendered to the DOM.\r\n        */\r\n        this.setArrayWhenFirstLoad();\r\n    }\r\n\r\n    setArrayWhenFirstLoad() {\r\n        const array = [];\r\n\r\n        for(let i = 0; i < this.state.arraySize; i++) {\r\n            array.push(randomIntGenerator(10, 600));\r\n        }\r\n        this.setState({array: array});\r\n    }\r\n\r\n    clearAllTimeouts(){\r\n        this.timerIds.forEach(function(id) {\r\n            clearTimeout(id);\r\n        })\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n\r\n        for(let i = 0; i < this.state.arraySize; i++) {\r\n            array.push(randomIntGenerator(10, 600));\r\n        }\r\n        this.setState({array: array});\r\n        \r\n        // To clear the current animations\r\n        this.clearAllTimeouts();\r\n    }\r\n\r\n    changeArraySize = (event, value) => {\r\n        this.setState({\r\n            arraySize: value\r\n        })\r\n    }\r\n\r\n    /* TODO: update color after the sorting is finished\r\n    updateColor() {\r\n        const barContainer = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < barContainer.length; i++) {\r\n            barContainer[i].style.backgroundColor = 'black';\r\n        }\r\n    }\r\n    */\r\n    \r\n    playAnimations(animations) {\r\n        for(let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isComparing = (animations[i][0] === 'compare1' || animations[i][0] === 'compare2');\r\n            \r\n            if(isComparing) {\r\n                const color = (animations[i][0] === 'compare1') ? COMPARING_COLOR : ORIGINAL_COLOR;\r\n\r\n                const [, barOneInx, barTwoInx] = animations[i];\r\n\r\n                const barOneStyle = arrayBars[barOneInx].style;\r\n                const barTwoStyle = arrayBars[barTwoInx].style;\r\n                \r\n                let t = setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * (MAX_ANIMATION_MS + 1 - this.state.animationSpeed))\r\n                \r\n                this.timerIds.push(t);\r\n            } else {\r\n                let t = setTimeout(() => {\r\n                    const [, barInx, barHeight] = animations[i];\r\n                    \r\n                    const barStyle = arrayBars[barInx].style;\r\n                    barStyle.height = `${barHeight *0.1}vh`; \r\n\r\n                }, i * (MAX_ANIMATION_MS + 1 - this.state.animationSpeed));\r\n\r\n                this.timerIds.push(t);\r\n            }\r\n        }\r\n    }\r\n\r\n    disableAllButtons(){\r\n        this.setState({disableButtons: true});\r\n    }\r\n\r\n    doSort(sortAlgo) {\r\n        this.disableAllButtons();\r\n        \r\n        let animations = [];\r\n        \r\n        switch(sortAlgo) {\r\n            case 'mergesort':\r\n                animations = MergeSortAnimations(this.state.array);\r\n                break;\r\n            case 'quicksort':\r\n                animations = QuickSortAnimations(this.state.array);\r\n                break;\r\n            case 'heapsort':\r\n                animations = HeapSortAnimations(this.state.array);\r\n                break;\r\n            case 'bubblesort':\r\n                animations = BubbleSortAnimations(this.state.array);\r\n                break;\r\n            case 'insertionsort':\r\n                animations = InsertionSortAnimations(this.state.array);\r\n                break;\r\n            default:\r\n                animations = [];\r\n                break;\r\n        }\r\n        \r\n        // Need to add a short timeout here in order to change the bar color successfully\r\n        setTimeout(()=>{\r\n            this.playAnimations(animations);\r\n        }, 10)\r\n    }\r\n\r\n   handleSliderChange = (event, value) => {\r\n        this.setState({animationSpeed: value});\r\n    }\r\n\r\n    render() {\r\n        const {animationSpeed, disableButtons} = this.state;\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n\r\n                <div className=\"top-container\">\r\n                    <h1>Welcome to My Sorting Visualizer!</h1>\r\n                                    \r\n                    <div className=\"buttons\">\r\n                        <NewArrayButton value = {this.state.arraySize} className=\"newAarryButton\" setArraySize={this.changeArraySize} resetArray={this.resetArray} />\r\n                        \r\n                        <Button variant=\"contained\" color=\"primary\" disabled={disableButtons} onClick={()=>this.doSort('mergesort')}>Merge Sort</Button> {' '}\r\n                        <Button variant=\"contained\" color=\"primary\" disabled={disableButtons} onClick={()=>this.doSort('quicksort')}>Quick Sort</Button> {' '}\r\n                        <Button variant=\"contained\" color=\"primary\" disabled={disableButtons} onClick={()=>this.doSort('heapsort')}>Heap Sort</Button> {' '}\r\n                        <Button variant=\"contained\" color=\"primary\" disabled={disableButtons} onClick={()=>this.doSort('bubblesort')}>Bubble Sort</Button> {' '}\r\n                        <Button variant=\"contained\" color=\"primary\" disabled={disableButtons} onClick={()=>this.doSort('insertionsort')}>Insertion Sort</Button> {' '}\r\n                    </div>\r\n\r\n                    <div className=\"slider\">\r\n                        <div> Sorting Speed </div>\r\n                        <SliderBar marks={marks} valueLabelDisplay=\"auto\" value={animationSpeed} onChange={this.handleSliderChange} max = {MAX_ANIMATION_MS} aria-labelledby=\"continuous-slider\"/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"array-bar-container\">\r\n                    {this.state.array.map((value, index) => (\r\n                        <div className=\"array-bar\" \r\n                            key={Math.random()}\r\n                            style={{height:`${value*0.1}vh`, backgroundColor: ORIGINAL_COLOR}}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\n","// Runtime: O(N^2)\r\n\r\nimport {swap} from '../helper-functions/swap';\r\n\r\nexport const BubbleSortAnimations = (values) => {\r\n    const animations = [];\r\n    const array = [...values];\r\n\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            // Comparing j and j+1            \r\n            animations.push(['compare1', j, j+1]);\r\n            animations.push(['compare2', j, j+1]);\r\n        \r\n            if(array[j] > array[j+1]) {\r\n                animations.push(['swap', j, array[j+1]]);\r\n                animations.push(['swap', j + 1, array[j]]);\r\n                \r\n                swap(array, j, j+1);\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n","//Runtime: O(N^2)\r\n\r\nimport {swap} from '../helper-functions/swap';\r\n\r\nexport const InsertionSortAnimations = (values) => {\r\n    const animations = [];\r\n    const array = [...values]\r\n\r\n    for(let i = 0; i < array.length - 1; i++) {\r\n        // Find the minimum element in the unsorted portion\r\n        let mind_inx = i;\r\n        for(let j = i + 1; j < array.length; j++) {\r\n            animations.push(['compare1', i, j]);\r\n            animations.push(['compare2', i, j]);\r\n            \r\n            if(array[j] < array[mind_inx]) {\r\n                mind_inx = j;\r\n            }\r\n        }\r\n        \r\n        // do the swap\r\n        animations.push(['swap', i, array[mind_inx]]);\r\n        animations.push(['swap', mind_inx, array[i]]);\r\n\r\n        swap(array, mind_inx, i);\r\n    }\r\n\r\n    return animations;\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './app/main';\n\nfunction App() {\n    return (\n    <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}