{"ast":null,"code":"var _jsxFileName = \"D:\\\\JavaScript\\\\sorting-visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport * as SortingAlgorithms from './SortingAlgorithms.jsx';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n  /*\r\n  The componentDidMount() method runs \r\n  after the component output has been rendered to the DOM.\r\n  */\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 200; i++) {\n      array.push(randomIntGenerator(10, 700));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const cloneArray = [...this.state.array].sort((a, b) => a - b);\n    const sortedArray = SortingAlgorithms.mergeSort(this.state.array);\n    console.log(sortedArray);\n    console.log(cloneArray);\n    console.log(this.state.array);\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \"New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, \"Bubble Sort\")), array.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nfunction randomIntGenerator(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n;\n\nfunction twoArrayEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] != array2[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","SortingAlgorithms","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGenerator","setState","mergeSort","cloneArray","sort","a","b","sortedArray","console","log","quickSort","heapSort","bubbleSort","render","map","value","index","height","min","max","Math","floor","random","twoArrayEqual","array1","array2","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,OAAO,KAAKC,iBAAZ,MAAmC,yBAAnC;AAEA,eAAe,MAAMC,iBAAN,SAAgCF,KAAK,CAACG,SAAtC,CAAgD;AAC3DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;AACD;;;;;;AAIAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,GAAnB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBH,MAAAA,KAAK,CAACI,IAAN,CAAWC,kBAAkB,CAAC,EAAD,EAAK,GAAL,CAA7B;AACH;;AACD,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACH;;AAGDO,EAAAA,SAAS,GAAG;AACR,UAAMC,UAAU,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWC,KAAf,EACES,IADF,CACO,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CADrB,CAAnB;AAEA,UAAMC,WAAW,GAAGlB,iBAAiB,CAACa,SAAlB,CAA4B,KAAKR,KAAL,CAAWC,KAAvC,CAApB;AAEAa,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAL,CAAWC,KAAvB;AACH;;AAEDe,EAAAA,SAAS,GAAG,CAAE;;AAEdC,EAAAA,QAAQ,GAAG,CAAE;;AAEbC,EAAAA,UAAU,GAAG,CAAE;;AAEfC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAClB,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKG,UAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKK,SAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKQ,SAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKC,QAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJJ,eAKI;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKC,UAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALJ,CADJ,EASKjB,KAAK,CAACmB,GAAN,CAAU,CAACC,KAAD,EAAQC,KAAR,kBACP;AAAK,MAAA,SAAS,EAAC,WAAf;AACI,MAAA,GAAG,EAAEA,KADT;AAEI,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,GAAEF,KAAM;AAAjB,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CATL,CADJ;AAmBH;;AA/D0D;;AAkE/D,SAASf,kBAAT,CAA4BkB,GAA5B,EAAiCC,GAAjC,EAAqC;AACjC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH;;AAAA;;AAGD,SAASK,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;AACnC,MAAGD,MAAM,CAACE,MAAP,KAAkBD,MAAM,CAACC,MAA5B,EAAoC,OAAO,KAAP;;AAEpC,OAAI,IAAI5B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG0B,MAAM,CAACE,MAA1B,EAAkC5B,CAAC,EAAnC,EAAuC;AACnC,QAAG0B,MAAM,CAAC1B,CAAD,CAAN,IAAa2B,MAAM,CAAC3B,CAAD,CAAtB,EAA2B,OAAO,KAAP;AAC9B;;AACD,SAAO,IAAP;AACH","sourcesContent":["import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport * as SortingAlgorithms from './SortingAlgorithms.jsx'\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n    /*\r\n    The componentDidMount() method runs \r\n    after the component output has been rendered to the DOM.\r\n    */\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < 200; i++) {\r\n            array.push(randomIntGenerator(10, 700));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n\r\n    mergeSort() {\r\n        const cloneArray = [...this.state.array]\r\n                            .sort((a, b) => a - b);\r\n        const sortedArray = SortingAlgorithms.mergeSort(this.state.array);\r\n\r\n        console.log(sortedArray);\r\n        console.log(cloneArray);\r\n        console.log(this.state.array);\r\n    }\r\n\r\n    quickSort() {}\r\n\r\n    heapSort() {}\r\n\r\n    bubbleSort() {}\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        \r\n        return (           \r\n            <div className=\"array-container\">\r\n                <div className=\"buttons\">\r\n                    <button onClick={()=>this.resetArray()}>New Array</button>\r\n                    <button onClick={()=>this.mergeSort()}>Merge Sort</button>\r\n                    <button onClick={()=>this.quickSort()}>Quick Sort</button>\r\n                    <button onClick={()=>this.heapSort()}>Heap Sort</button>\r\n                    <button onClick={()=>this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n\r\n                {array.map((value, index) => (\r\n                    <div className=\"array-bar\" \r\n                        key={index}\r\n                        style={{height:`${value}px`}}>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        ) \r\n\r\n    }\r\n}\r\n\r\nfunction randomIntGenerator(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\nfunction twoArrayEqual(array1, array2) {\r\n    if(array1.length !== array2.length) return false;\r\n\r\n    for(let i = 0; i < array1.length; i++) {\r\n        if(array1[i] != array2[i]) return false\r\n    }\r\n    return true;\r\n}"]},"metadata":{},"sourceType":"module"}