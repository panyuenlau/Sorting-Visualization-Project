{"ast":null,"code":"var _jsxFileName = \"D:\\\\JavaScript\\\\sorting-visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport * as SortingAlgorithms from './SortingAlgorithms.jsx';\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 1;\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n  /*\r\n  The componentDidMount() method runs \r\n  after the component output has been rendered to the DOM.\r\n  */\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 200; i++) {\n      array.push(randomIntGenerator(10, 700));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    // const cloneArray = [...this.state.array]\n    //                     .sort((a, b) => a - b);\n    // const sortedArray = SortingAlgorithms.mergeSort(this.state.array);\n    // console.log(sortedArray);\n    // console.log(cloneArray);\n    // console.log(this.state.array);\n    // console.log(twoArrayEqual(cloneArray, sortedArray));\n    const animations = SortingAlgorithms.mergeSort(this.state.array);\n\n    for (let i = 0; animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      console.log(animations[i]);\n\n      if (isColorChange) {\n        const [barOneInx, barTwoInx] = animations[i];\n        const barOneStyle = arrayBars[barOneInx].style;\n        const barTwoStyle = arrayBars[barTwoInx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroiundColor = color;\n          barTwoStyle.backgroiundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneInx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneInx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, \"Bubble Sort\")), array.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nfunction randomIntGenerator(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n;\n\nfunction twoArrayEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","SortingAlgorithms","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGenerator","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","console","log","barOneInx","barTwoInx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroiundColor","newHeight","height","quickSort","heapSort","bubbleSort","render","map","value","index","min","max","Math","floor","random","twoArrayEqual","array1","array2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport * as SortingAlgorithms from './SortingAlgorithms.jsx'\r\n\r\n\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n    /*\r\n    The componentDidMount() method runs \r\n    after the component output has been rendered to the DOM.\r\n    */\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < 200; i++) {\r\n            array.push(randomIntGenerator(10, 700));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n\r\n    mergeSort() {\r\n        // const cloneArray = [...this.state.array]\r\n        //                     .sort((a, b) => a - b);\r\n        // const sortedArray = SortingAlgorithms.mergeSort(this.state.array);\r\n\r\n        // console.log(sortedArray);\r\n        // console.log(cloneArray);\r\n        // console.log(this.state.array);\r\n        // console.log(twoArrayEqual(cloneArray, sortedArray));\r\n\r\n        const animations = SortingAlgorithms.mergeSort(this.state.array);\r\n        for (let i = 0; animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            \r\n            console.log(animations[i]);\r\n\r\n            if(isColorChange) {\r\n                const [barOneInx, barTwoInx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneInx].style;\r\n                const barTwoStyle = arrayBars[barTwoInx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                   barOneStyle.backgroiundColor = color;\r\n                   barTwoStyle.backgroiundColor = color; \r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneInx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneInx].style;\r\n                    barOneStyle.height = `${newHeight}px`; \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {}\r\n\r\n    heapSort() {}\r\n\r\n    bubbleSort() {}\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        \r\n        return (           \r\n            <div className=\"array-container\">\r\n                <div className=\"buttons\">\r\n                    <button onClick={()=>this.resetArray()}>New Array</button>\r\n                    <button onClick={()=>this.mergeSort()}>Merge Sort</button>\r\n                    <button onClick={()=>this.quickSort()}>Quick Sort</button>\r\n                    <button onClick={()=>this.heapSort()}>Heap Sort</button>\r\n                    <button onClick={()=>this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n\r\n                {array.map((value, index) => (\r\n                    <div className=\"array-bar\" \r\n                        key={index}\r\n                        style={{height:`${value}px`}}>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nfunction randomIntGenerator(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\nfunction twoArrayEqual(array1, array2) {\r\n    if(array1.length !== array2.length) return false;\r\n\r\n    for(let i = 0; i < array1.length; i++) {\r\n        if(array1[i] !== array2[i]) return false\r\n    }\r\n    return true;\r\n}"]},"metadata":{},"sourceType":"module"}