{"ast":null,"code":"// export const mergeSort = array => {\n//     if (array.length === 1) return array;\n//     const middle = Math.floor(array.length / 2);\n//     const left = mergeSort(array.slice(0, middle));\n//     const right = mergeSort(array.slice(middle));\n//     const sortedArray = [];\n//     let i = 0, j = 0;\n//     while(i < left.length && j < right.length) {\n//         if(left[i] < right[j])\n//             sortedArray.push(left[i++]);\n//         else\n//             sortedArray.push(right[j++]);\n//     }\n//     while( i < left.length) sortedArray.push(left[i++]);\n//     while( j < right.length) sortedArray.push(right[j++]);\n//     return sortedArray;\n// }\n// export function mergeSort(array) {\n//     const animations = [];\n//     if (array.length <= 1) return array;\n//     const auxiliaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//     return animations;\n// }\n// function mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n//     if(startIndex === endIndex) return;\n//     const middleIndex = Math.floor((startIndex + endIndex) / 2);\n//     mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n//     mergeSortHelper(auxiliaryArray, middleIndex+1, endIndex, mainArray, animations);\n//     merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n// }\n// function merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n//     let k = startIndex;\n//     let i = startIndex;\n//     let j = middleIndex + 1;\n//     while(i <= middleIndex && j <= endIndex) {\n//         animations.push([i, j]);\n//         animations.push([i, j]);\n//         if(auxiliaryArray[i] <= auxiliaryArray[j]) {\n//             animations.push([k, auxiliaryArray[i]]);\n//             mainArray[k++] = auxiliaryArray[i++];\n//         } else {\n//             animations.push([k, auxiliaryArray[j]]);\n//             mainArray[k++] = auxiliaryArray[j++];\n//         }\n//     }\n//     while (i <= middleIndex) {\n//         animations.push([i, i]);\n//         animations.push([i, i]);\n//         animations.push([k, auxiliaryArray[i]]);\n//         mainArray[k++] = auxiliaryArray[i++];\n//     }\n//     while (j <= endIndex) {\n//         animations.push([j, j]);\n//         animations.push([j, j]);\n//         animations.push([k, auxiliaryArray[j]]);\n//         mainArray[k++] = auxiliaryArray[j++];\n//     }\n// }\nexport function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingAlgorithms.jsx"],"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["// export const mergeSort = array => {\r\n//     if (array.length === 1) return array;\r\n\r\n//     const middle = Math.floor(array.length / 2);\r\n//     const left = mergeSort(array.slice(0, middle));\r\n//     const right = mergeSort(array.slice(middle));\r\n\r\n//     const sortedArray = [];\r\n//     let i = 0, j = 0;\r\n\r\n//     while(i < left.length && j < right.length) {\r\n//         if(left[i] < right[j])\r\n//             sortedArray.push(left[i++]);\r\n//         else\r\n//             sortedArray.push(right[j++]);\r\n//     }\r\n\r\n//     while( i < left.length) sortedArray.push(left[i++]);\r\n\r\n//     while( j < right.length) sortedArray.push(right[j++]);\r\n\r\n//     return sortedArray;\r\n// }\r\n\r\n// export function mergeSort(array) {\r\n//     const animations = [];\r\n//     if (array.length <= 1) return array;\r\n//     const auxiliaryArray = array.slice();\r\n//     mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n//     return animations;\r\n// }\r\n\r\n// function mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\r\n//     if(startIndex === endIndex) return;\r\n//     const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n//     mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\r\n//     mergeSortHelper(auxiliaryArray, middleIndex+1, endIndex, mainArray, animations);\r\n//     merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n// }\r\n\r\n// function merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\r\n//     let k = startIndex;\r\n//     let i = startIndex;\r\n//     let j = middleIndex + 1;\r\n\r\n//     while(i <= middleIndex && j <= endIndex) {\r\n//         animations.push([i, j]);\r\n\r\n//         animations.push([i, j]);\r\n\r\n//         if(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n//             animations.push([k, auxiliaryArray[i]]);\r\n//             mainArray[k++] = auxiliaryArray[i++];\r\n//         } else {\r\n//             animations.push([k, auxiliaryArray[j]]);\r\n//             mainArray[k++] = auxiliaryArray[j++];\r\n//         }\r\n//     }\r\n\r\n//     while (i <= middleIndex) {\r\n//         animations.push([i, i]);\r\n//         animations.push([i, i]);\r\n//         animations.push([k, auxiliaryArray[i]]);\r\n//         mainArray[k++] = auxiliaryArray[i++];\r\n//     }\r\n\r\n//     while (j <= endIndex) {\r\n//         animations.push([j, j]);\r\n//         animations.push([j, j]);\r\n//         animations.push([k, auxiliaryArray[j]]);\r\n//         mainArray[k++] = auxiliaryArray[j++];\r\n//     }\r\n// }\r\n\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}