{"ast":null,"code":"var _jsxFileName = \"D:\\\\JavaScript\\\\sorting-visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport * as SortingAlgorithms from './SortingAlgorithms.jsx';\nimport Button from 'react-bootstrap/Button';\nconst PRIMARY_COLOR = '#00bcd4';\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 5; // var stopFlag = false;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n  /*\r\n  The componentDidMount() method runs \r\n  after the component output has been rendered to the DOM.\r\n  */\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 200; i++) {\n      array.push(randomIntGenerator(10, 600));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = SortingAlgorithms.mergeSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneInx, barTwoInx] = animations[i];\n        const barOneStyle = arrayBars[barOneInx].style;\n        const barTwoStyle = arrayBars[barTwoInx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneInx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneInx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {} // stopSorting() {\n  //     stopFlag = !stopFlag;\n  //     console.log(stopFlag);\n  // }\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"Welcome to My Sorting Visualizer!\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, \"New Array\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \"Merge Sort\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, \"Quick Sort\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, \"Heap Sort\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, \"Bubble Sort\"), \" \", ' '), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, \"console.log(\\\"reloading...\\\");\", array.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: index,\n      style: {\n        height: `${value * 0.1}vh`,\n        backgroundColor: \"#ff9800\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nfunction randomIntGenerator(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n;\n\nfunction twoArrayEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","SortingAlgorithms","Button","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGenerator","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneInx","barTwoInx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","render","map","value","index","min","max","Math","floor","random","twoArrayEqual","array1","array2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport * as SortingAlgorithms from './SortingAlgorithms.jsx'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst PRIMARY_COLOR = '#00bcd4';\r\nconst SECONDARY_COLOR = 'red';\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// var stopFlag = false;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n    /*\r\n    The componentDidMount() method runs \r\n    after the component output has been rendered to the DOM.\r\n    */\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < 200; i++) {\r\n            array.push(randomIntGenerator(10, 600));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n\r\n    mergeSort() {\r\n        const animations = SortingAlgorithms.mergeSort(this.state.array);\r\n        \r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            \r\n            if(isColorChange) {\r\n                const [barOneInx, barTwoInx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneInx].style;\r\n                const barTwoStyle = arrayBars[barTwoInx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color; \r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneInx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneInx].style;\r\n                    barOneStyle.height = `${newHeight}px`; \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    quickSort() {}\r\n\r\n    heapSort() {}\r\n\r\n    bubbleSort() {}\r\n\r\n\r\n    // stopSorting() {\r\n    //     stopFlag = !stopFlag;\r\n    //     console.log(stopFlag);\r\n    // }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        return (\r\n            <div className=\"array-container\">\r\n                <h1>Welcome to My Sorting Visualizer!</h1>\r\n\r\n                <div className=\"buttons\">\r\n                    <Button variant=\"outline-primary\" onClick={()=>this.resetArray()}>New Array</Button> {' '}\r\n                    {/* <Button variant=\"outline-danger\" onClick={()=>this.stopSorting()}>Stop</Button> {' '} */}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.mergeSort()}>Merge Sort</Button> {' '}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.quickSort()}>Quick Sort</Button> {' '}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.heapSort()}>Heap Sort</Button> {' '}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.bubbleSort()}>Bubble Sort</Button> {' '}\r\n                </div>\r\n\r\n                <div className=\"array-bar-container\">\r\n                    console.log(\"reloading...\");\r\n                    {array.map((value, index) => (\r\n                        <div className=\"array-bar\" \r\n                            key={index}\r\n                            style={{height:`${value*0.1}vh`, backgroundColor: \"#ff9800\"}}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nfunction randomIntGenerator(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\nfunction twoArrayEqual(array1, array2) {\r\n    if(array1.length !== array2.length) return false;\r\n\r\n    for(let i = 0; i < array1.length; i++) {\r\n        if(array1[i] !== array2[i]) return false\r\n    }\r\n    return true;\r\n}"]},"metadata":{},"sourceType":"module"}