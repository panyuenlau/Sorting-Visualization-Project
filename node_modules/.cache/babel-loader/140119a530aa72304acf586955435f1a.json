{"ast":null,"code":"// function getMergeSortAnimations(array) {\nexport const MergeSortAnimations = array => {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice(); // shallow copy of original array\n\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n};\n\nfunction mergeSortHelper(originalArray, start, end, auxiliaryArray, animations) {\n  if (start === end) return;\n  const middle = Math.floor((start + end) / 2); // sort first and second halves\n\n  mergeSortHelper(auxiliaryArray, start, middle, originalArray, animations);\n  mergeSortHelper(auxiliaryArray, middle + 1, end, originalArray, animations); // merge the sorted halves\n\n  merge(originalArray, start, middle, end, auxiliaryArray, animations);\n}\n\nfunction merge(originalArray, start, middle, end, auxiliaryArray, animations) {\n  let k = start;\n  let i = start;\n  let j = middle + 1;\n  console.log(\"initial: \", start, middle, end);\n\n  while (i <= middle && j <= end) {\n    // these are the values that are being compared, push them once to change their color\n    animations.push([i, j]); // push them second time to revert their color\n\n    animations.push([i, j]);\n    console.log(i, j);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // animations.push([k, auxiliaryArray[i]]);\n      // animations.push([i, auxiliaryArray[i], j, auxiliaryArray[j]]);\n      animations.push([k, auxiliaryArray[i], j, auxiliaryArray[j]]);\n      originalArray[k++] = auxiliaryArray[i++];\n    } else {\n      // animations.push([k, auxiliaryArray[j]]);\n      // animations.push([j, auxiliaryArray[j], i, auxiliaryArray[i]])\n      animations.push([k, auxiliaryArray[j], j, auxiliaryArray[i]]);\n      originalArray[k++] = auxiliaryArray[j++];\n    }\n  } // add the remaining elements in the first interval\n\n\n  while (i < middle) {\n    animations.push([i, i]);\n    animations.push([i, i]); // animations.push([k, auxiliaryArray[i], k, auxiliaryArray[i]]);\n\n    animations.push([k, auxiliaryArray[i], k, auxiliaryArray[i]]);\n    originalArray[k++] = auxiliaryArray[i++];\n  } // add the remaining elements in the second interval\n\n\n  while (j < end) {\n    animations.push([j, j]);\n    animations.push([j, j]); // animations.push([k, auxiliaryArray[j], k, auxiliaryArray[i]]);\n\n    animations.push([k, auxiliaryArray[j], k, auxiliaryArray[j]]);\n    originalArray[k++] = auxiliaryArray[j++];\n  }\n\n  console.log(start, end, originalArray);\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/mergeSort.js"],"names":["MergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","originalArray","start","end","middle","Math","floor","merge","k","i","j","console","log","push"],"mappings":"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","sourcesContent":["// function getMergeSortAnimations(array) {\r\nexport const MergeSortAnimations = (array) => {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice(); // shallow copy of original array\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(originalArray, start, end, auxiliaryArray, animations) {\r\n\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end) / 2);\r\n\r\n    // sort first and second halves\r\n    mergeSortHelper(auxiliaryArray, start, middle, originalArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middle+1, end, originalArray, animations);\r\n    \r\n    // merge the sorted halves\r\n    merge(originalArray, start, middle, end, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(originalArray, start, middle, end, auxiliaryArray, animations) {\r\n    let k = start;\r\n    let i = start;\r\n    let j = middle + 1;\r\n    console.log(\"initial: \", start, middle, end);\r\n    while(i <= middle && j <= end) {\r\n        // these are the values that are being compared, push them once to change their color\r\n        animations.push([i, j]);\r\n        // push them second time to revert their color\r\n        animations.push([i, j]);\r\n\r\n        console.log(i, j);\r\n\r\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // animations.push([k, auxiliaryArray[i]]);\r\n            // animations.push([i, auxiliaryArray[i], j, auxiliaryArray[j]]);\r\n            animations.push([k, auxiliaryArray[i], j, auxiliaryArray[j]]);\r\n\r\n            originalArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // animations.push([k, auxiliaryArray[j]]);\r\n            // animations.push([j, auxiliaryArray[j], i, auxiliaryArray[i]])\r\n            animations.push([k, auxiliaryArray[j], j, auxiliaryArray[i]])\r\n            originalArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n\r\n    // add the remaining elements in the first interval\r\n    while (i <middle) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n\r\n        // animations.push([k, auxiliaryArray[i], k, auxiliaryArray[i]]);\r\n        animations.push([k, auxiliaryArray[i], k, auxiliaryArray[i]]);\r\n        originalArray[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    // add the remaining elements in the second interval\r\n    while (j < end) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n\r\n        // animations.push([k, auxiliaryArray[j], k, auxiliaryArray[i]]);\r\n        animations.push([k, auxiliaryArray[j], k, auxiliaryArray[j]]);\r\n        originalArray[k++] = auxiliaryArray[j++];\r\n    }\r\n\r\n    console.log(start, end, originalArray);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}