{"ast":null,"code":"import React from 'react';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n  /*\r\n  The componentDidMount() method runs \r\n  after the component output has been rendered to the DOM.\r\n  */\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 1000; i++) {\n      array.push(randomIntGenerator(5, 500));\n    }\n\n    this.setState(array);\n  }\n\n}\n\nfunction randomIntGenerator(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n;","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGenerator","setState","min","max","Math","floor","random"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAC3DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;AACD;;;;;;AAIAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,IAAnB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1BH,MAAAA,KAAK,CAACI,IAAN,CAAWC,kBAAkB,CAAC,CAAD,EAAI,GAAJ,CAA7B;AACH;;AACD,SAAKC,QAAL,CAAcN,KAAd;AACH;;AAtB0D;;AAyB/D,SAASK,kBAAT,CAA4BE,GAA5B,EAAiCC,GAAjC,EAAqC;AACjC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH;;AAAA","sourcesContent":["import React from 'react'\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n    /*\r\n    The componentDidMount() method runs \r\n    after the component output has been rendered to the DOM.\r\n    */\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < 1000; i++) {\r\n            array.push(randomIntGenerator(5, 500));\r\n        }\r\n        this.setState(array);\r\n    }\r\n}\r\n\r\nfunction randomIntGenerator(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};"]},"metadata":{},"sourceType":"module"}