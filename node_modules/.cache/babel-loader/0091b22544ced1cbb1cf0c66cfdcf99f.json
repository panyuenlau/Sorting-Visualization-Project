{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice(); // shallow copy of original array\n\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(originalArray, start, end, auxiliaryArray, animations) {\n  console.log(start, end);\n  console.log(auxiliaryArray);\n  console.log(originalArray);\n  if (start === end) return;\n  const middle = Math.floor((start + end) / 2);\n  mergeSortHelper(auxiliaryArray, start, middle, originalArray, animations);\n  mergeSortHelper(auxiliaryArray, middle + 1, end, originalArray, animations); // merge the sorted halves\n\n  merge(originalArray, start, middle, end, auxiliaryArray, animations);\n}\n\nfunction merge(originalArray, start, middle, end, auxiliaryArray, animations) {\n  let k = start;\n  let i = start;\n  let j = middle + 1;\n\n  while (i <= middle && j <= end) {\n    // these are the values that are being compared, push them once to change their color\n    animations.push([i, j]); // push them second time to revert their color\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      originalArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      originalArray[k++] = auxiliaryArray[j++];\n    }\n  } // for the remaining elements\n\n\n  while (i <= middle) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    originalArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= end) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    originalArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingAlgorithms.jsx"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","originalArray","start","end","console","log","middle","Math","floor","merge","k","i","j","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice(); // shallow copy of original array\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(originalArray, start, end, auxiliaryArray, animations) {\r\n    console.log(start, end);\r\n    console.log(auxiliaryArray);\r\n    console.log(originalArray);\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end) / 2);\r\n    mergeSortHelper(auxiliaryArray, start, middle, originalArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middle+1, end, originalArray, animations);\r\n    \r\n    // merge the sorted halves\r\n    merge(originalArray, start, middle, end, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(originalArray, start, middle, end, auxiliaryArray, animations) {\r\n    let k = start;\r\n    let i = start;\r\n    let j = middle + 1;\r\n\r\n    while(i <= middle && j <= end) {\r\n        // these are the values that are being compared, push them once to change their color\r\n        animations.push([i, j]);\r\n        // push them second time to revert their color\r\n        animations.push([i, j]);\r\n\r\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            originalArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            originalArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n\r\n    // for the remaining elements\r\n    while (i <= middle) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        originalArray[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    while (j <= end) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        originalArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}