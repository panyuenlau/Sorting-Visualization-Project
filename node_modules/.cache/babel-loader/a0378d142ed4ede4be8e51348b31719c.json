{"ast":null,"code":"var _jsxFileName = \"D:\\\\JavaScript\\\\sorting-visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.js\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport Button from 'react-bootstrap/Button';\nimport { MergeSortAnimations } from './mergeSort.js';\nimport { BubbleSortAnimations } from './bubbleSort.js';\nconst PRIMARY_COLOR = '#00bcd4'; // const PRIMARY_COLOR = 'turquoise';\n\nconst SECONDARY_COLOR = 'red';\nconst ANIMATION_SPEED_MS = 6; // var stopFlag = false;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n  /*\r\n  The componentDidMount() method runs \r\n  after the component output has been rendered to the DOM.\r\n  */\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    // const array = [];\n    const array = [30, 10, 70, 90, 40, 60, 50, 20, 80, 100]; // for(let i = 0; i < 100; i++) {\n    //     array.push(randomIntGenerator(10, 600));\n    // }\n\n    this.setState({\n      array: array\n    }); // TODO: Stop current sorting action\n  }\n\n  updateColor() {\n    const barContainer = document.getElementsByClassName('array-bar');\n\n    for (let i = 0; i < barContainer.length; i++) {\n      barContainer[i].style.backgroundColor = 'black';\n    }\n  }\n\n  playAnimations(animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        // Change color of the bars what we are currently comparing\n        const [barOneInx, barTwoInx] = animations[i];\n        const barOneStyle = arrayBars[barOneInx].style;\n        const barTwoStyle = arrayBars[barTwoInx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        // every third element: [first bar index, height]\n        setTimeout(() => {\n          const [barOneInx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneInx].style;\n          barOneStyle.height = `${newHeight * 0.1}vh`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  mergeSort() {\n    const animations = MergeSortAnimations(this.state.array);\n    console.log(animations);\n    this.playAnimations(animations); // TODO: Set all bars color after finish sorting\n    // Async, await? Promice?\n    // this.updateColor();\n  }\n\n  bubbleSort() {\n    const animations = BubbleSortAnimations(this.state.array);\n    console.log(animations); // this.playAnimations(animations);\n  }\n\n  quickSort() {}\n\n  heapSort() {} // stopSorting() {\n  //     stopFlag = !stopFlag;\n  //     console.log(stopFlag);\n  // }\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    console.log(this.state.array);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, \"Welcome to My Sorting Visualizer!\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-primary\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"New Array\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, \"Merge Sort\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, \"Quick Sort\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, \"Heap Sort\"), \" \", ' ', /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, \"Bubble Sort\"), \" \", ' '), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, this.state.array.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: Math.random(),\n      style: {\n        height: `${value * 0.1}vh`,\n        backgroundColor: \"#ff9800\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nfunction randomIntGenerator(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n;\n\nfunction twoArrayEqual(array1, array2) {\n  if (array1.length !== array2.length) return false;\n\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.js"],"names":["React","Button","MergeSortAnimations","BubbleSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","setState","updateColor","barContainer","document","getElementsByClassName","i","length","style","backgroundColor","playAnimations","animations","arrayBars","isColorChange","barOneInx","barTwoInx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","mergeSort","console","log","bubbleSort","quickSort","heapSort","render","map","value","index","Math","random","randomIntGenerator","min","max","floor","twoArrayEqual","array1","array2"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {MergeSortAnimations} from './mergeSort.js'\r\nimport {BubbleSortAnimations} from './bubbleSort.js'\r\n\r\nconst PRIMARY_COLOR = '#00bcd4';\r\n// const PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\nconst ANIMATION_SPEED_MS = 6;\r\n\r\n// var stopFlag = false;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    /*\r\n    The componentDidMount() method runs \r\n    after the component output has been rendered to the DOM.\r\n    */\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {       \r\n        // const array = [];\r\n        const array = [30,10,70, 90, 40, 60, 50, 20,80,100];\r\n\r\n        // for(let i = 0; i < 100; i++) {\r\n        //     array.push(randomIntGenerator(10, 600));\r\n        // }\r\n        this.setState({array: array});\r\n\r\n        // TODO: Stop current sorting action\r\n    }\r\n\r\n    updateColor() {\r\n        const barContainer = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < barContainer.length; i++) {\r\n            barContainer[i].style.backgroundColor = 'black';\r\n        }\r\n    }\r\n\r\n    playAnimations(animations) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            \r\n            if(isColorChange) {\r\n                // Change color of the bars what we are currently comparing\r\n                const [barOneInx, barTwoInx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneInx].style;\r\n                const barTwoStyle = arrayBars[barTwoInx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color; \r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                // every third element: [first bar index, height]\r\n                setTimeout(() => {\r\n                    const [barOneInx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneInx].style;\r\n                    barOneStyle.height = `${newHeight *0.1}vh`; \r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = MergeSortAnimations(this.state.array);\r\n        console.log(animations);\r\n        this.playAnimations(animations);\r\n\r\n        // TODO: Set all bars color after finish sorting\r\n        // Async, await? Promice?\r\n\r\n        // this.updateColor();\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = BubbleSortAnimations(this.state.array);\r\n        console.log(animations);\r\n        // this.playAnimations(animations);\r\n    }\r\n\r\n    quickSort() {}\r\n\r\n    heapSort() {}\r\n    \r\n\r\n    // stopSorting() {\r\n    //     stopFlag = !stopFlag;\r\n    //     console.log(stopFlag);\r\n    // }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        console.log(this.state.array);\r\n        return (\r\n            <div className=\"array-container\">\r\n                <h1>Welcome to My Sorting Visualizer!</h1>\r\n\r\n                <div className=\"buttons\">\r\n                    <Button variant=\"outline-primary\" onClick={()=> this.resetArray()}>New Array</Button> {' '}\r\n                    {/* <Button variant=\"outline-danger\" onClick={()=>this.stopSorting()}>Stop</Button> {' '} */}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.mergeSort()}>Merge Sort</Button> {' '}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.quickSort()}>Quick Sort</Button> {' '}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.heapSort()}>Heap Sort</Button> {' '}\r\n                    <Button variant=\"outline-secondary\" onClick={()=>this.bubbleSort()}>Bubble Sort</Button> {' '}\r\n                </div>\r\n\r\n                <div className=\"array-bar-container\">\r\n                    {this.state.array.map((value, index) => (\r\n                        <div className=\"array-bar\" \r\n                            key={Math.random()}\r\n                            style={{height:`${value*0.1}vh`, backgroundColor: \"#ff9800\"}}>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nfunction randomIntGenerator(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\nfunction twoArrayEqual(array1, array2) {\r\n    if(array1.length !== array2.length) return false;\r\n\r\n    for(let i = 0; i < array1.length; i++) {\r\n        if(array1[i] !== array2[i]) return false\r\n    }\r\n    return true;\r\n}"]},"metadata":{},"sourceType":"module"}