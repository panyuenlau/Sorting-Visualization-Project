{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice(); // shallow copy of original array\n\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(originalArray, startIndex, endIndex, auxiliaryArray, animations) {\n  if (startIndex === endIndex) return;\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, originalArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, originalArray, animations);\n  merge(originalArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\nfunction merge(originalArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = middleIndex + 1;\n\n  while (i <= middleIndex && j <= endIndex) {\n    // these are the values that are being compared, push them once to change their color\n    animations.push([i, j]); // push them second time to revert their color\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      originalArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      originalArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIndex) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    originalArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIndex) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    originalArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingAlgorithms.jsx"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","originalArray","startIndex","endIndex","middleIndex","Math","floor","merge","k","i","j","push"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice(); // shallow copy of original array\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(originalArray, startIndex, endIndex, auxiliaryArray, animations) {\r\n    if(startIndex === endIndex) return;\r\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIndex, middleIndex, originalArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIndex+1, endIndex, originalArray, animations);\r\n    merge(originalArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(originalArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\r\n    let k = startIndex;\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        // these are the values that are being compared, push them once to change their color\r\n        animations.push([i, j]);\r\n        // push them second time to revert their color\r\n        animations.push([i, j]);\r\n\r\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            originalArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            originalArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n\r\n    while (i <= middleIndex) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        originalArray[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    while (j <= endIndex) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        originalArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}