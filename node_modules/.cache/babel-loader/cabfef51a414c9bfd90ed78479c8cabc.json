{"ast":null,"code":"// export const mergeSort = array => {\n//     if (array.length === 1) return array;\n//     const middle = Math.floor(array.length / 2);\n//     const left = mergeSort(array.slice(0, middle));\n//     const right = mergeSort(array.slice(middle));\n//     const sortedArray = [];\n//     let i = 0, j = 0;\n//     while(i < left.length && j < right.length) {\n//         if(left[i] < right[j])\n//             sortedArray.push(left[i++]);\n//         else\n//             sortedArray.push(right[j++]);\n//     }\n//     while( i < left.length) sortedArray.push(left[i++]);\n//     while( j < right.length) sortedArray.push(right[j++]);\n//     return sortedArray;\n// }\nexport function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n  if (startIndex == endIndex) return;\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n  merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\nfunction merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = middleIndex + 1;\n\n  while (i <= middleIndex && j <= endIndex) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k]);\n    } else {\n      animation.swap = [k, j];\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n\n    animations.push(animation);\n  }\n\n  while (i <= middleIndex) {\n    animations.push({\n      comparsion: [i, i],\n      swap: [k, i]\n    });\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIndex) {\n    animations.push({\n      comparsion: [j, j],\n      swap: [k, j]\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["D:/JavaScript/sorting-visualizer/src/SortingVisualizer/SortingAlgorithms.jsx"],"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","merge","k","i","j","push","animation","swap","comparsion"],"mappings":"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","sourcesContent":["// export const mergeSort = array => {\r\n//     if (array.length === 1) return array;\r\n\r\n//     const middle = Math.floor(array.length / 2);\r\n//     const left = mergeSort(array.slice(0, middle));\r\n//     const right = mergeSort(array.slice(middle));\r\n\r\n//     const sortedArray = [];\r\n//     let i = 0, j = 0;\r\n\r\n//     while(i < left.length && j < right.length) {\r\n//         if(left[i] < right[j])\r\n//             sortedArray.push(left[i++]);\r\n//         else\r\n//             sortedArray.push(right[j++]);\r\n//     }\r\n\r\n//     while( i < left.length) sortedArray.push(left[i++]);\r\n\r\n//     while( j < right.length) sortedArray.push(right[j++]);\r\n\r\n//     return sortedArray;\r\n// }\r\n\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\r\n    if(startIndex == endIndex) return;\r\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIndex+1, endIndex, mainArray, animations);\r\n    merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\r\n    let k = startIndex;\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n\r\n    while(i <= middleIndex && j <= endIndex) {\r\n        animations.push([i, j]);\r\n\r\n        animations.push([i, j]);\r\n\r\n        if(auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, ])\r\n        } else {\r\n            animation.swap = [k, j];\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n        animations.push(animation);\r\n    }\r\n\r\n    while (i <= middleIndex) {\r\n        animations.push({\r\n            comparsion: [i, i],\r\n            swap: [k, i],\r\n        });\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    while (j <= endIndex) {\r\n        animations.push({\r\n            comparsion: [j, j],\r\n            swap: [k, j],\r\n        });\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}